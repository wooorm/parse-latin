'use strict'

var fs = require('fs')
var path = require('path')
var regenerate = require('regenerate')

var N = unicode('General_Category', 'Number')
var L = unicode('General_Category', 'Letter')
var Ll = unicode('General_Category', 'Lowercase_Letter')
var M = unicode('General_Category', 'Mark')
var Pc = unicode('General_Category', 'Connector_Punctuation')
var Pd = unicode('General_Category', 'Dash_Punctuation')
var Pe = unicode('General_Category', 'Close_Punctuation')
var Pf = unicode('General_Category', 'Final_Punctuation')
var Pi = unicode('General_Category', 'Initial_Punctuation')
var Po = unicode('General_Category', 'Other_Punctuation')
var Ps = unicode('General_Category', 'Open_Punctuation')
var BPWhiteSpace = unicode('Binary_Property', 'White_Space')
var combiningDiacriticalMarks = unicode('Block', 'Combining_Diacritical_Marks')

var combiningDiacriticalMark = regenerate().add(combiningDiacriticalMarks)

var combiningNonspacingMark = regenerate().add(M)

var letter = regenerate().add(L)

var letterLower = regenerate().add(Ll)

var numerical = regenerate().add(N)

var punctuation = regenerate()
  .add(Pc)
  .add(Pd)
  .add(Pe)
  .add(Pf)
  .add(Pi)
  .add(Po)
  .add(Ps)

  // Remove few weirdly-classified symbols:
  // <https://www.unicode.org/faq/punctuation_symbols.html#4>
  .remove('#')
  .remove('&')
  .remove('@')
  .remove('%')
  .remove('‰')
  .remove('‱')
  .remove('*')
  .remove('†')
  .remove('‡')
  .remove('※')

var punctuationClosing = regenerate().add(Pe)

var punctuationFinal = regenerate().add(Pf).add('"').add("'")

var whiteSpace = regenerate().add(BPWhiteSpace)

var word = regenerate()
  .add(combiningDiacriticalMark)
  .add(combiningNonspacingMark)
  .add(letter)
  .add(numerical)

var terminalMarker = regenerate()
  .add('.')
  .add(0x203d)
  .add('?')
  .add('!')
  .add(0x2026)

// Symbols part of surrounding words.
var wordSymbolInner = regenerate()
  .add('-')
  .add('@')
  .add('?')
  .add('=')
  .add('.')
  .add(':')
  .add("'")
  .add('&')
  .add(0x2019) // Right single quote
  .add(0x00ad) // Soft hyphen
  .add(0x00b7) // Hyphen
  .add(0x2010) // Non-breaking hyphen
  .add(0x2011) // Hyphenation point
  .add(0x2027) // Middle dot

// Symbols which can occur multiple times and still be part of surrounding
// words.
var wordSymbolInnerMulti = regenerate().add('_')

// Match closing or final punctuation, or terminal markers that should still be
// included in the previous sentence, even though they follow the sentence’s
// terminal marker.
var reAffixSymbol = new RegExp(
  '^(' +
    punctuationClosing +
    '|' +
    punctuationFinal +
    '|' +
    terminalMarker +
    ')\\1*$'
)

// Match one or more new line characters.
var reNewLine = /^[ \t]*((\r?\n|\r)[\t ]*)+$/

// Match two or more new line characters.
var reNewLineMulti = /^[ \t]*((\r?\n|\r)[\t ]*){2,}$/

// Match sentence-ending markers.
var reTerminalMarker = new RegExp('^((?:' + terminalMarker + ')+)$')

// Match punctuation marks part of surrounding words.
var reWordSymbolInner = new RegExp(
  '^(' +
    '(?:' +
    wordSymbolInner +
    ')' +
    '|' +
    '(?:' +
    wordSymbolInnerMulti +
    ')+' +
    ')$'
)

// Match punctuation marks.
var rePunctuation = new RegExp(punctuation)

// Match numbers.
var reNumerical = new RegExp('^(?:' + numerical + ')+$')

// Match initial digit.
var reDigitStart = /^\d/

// Match initial lowercase letter.
var reLowerInitial = new RegExp('^(?:' + letterLower + ')')

// Match anything, when possible words, white spaces, or astrals.
var reSurrogates = /[\uD800-\uDFFF]/

// Match a word.
var reWord = new RegExp(word)

// Match white space.
var reWhiteSpace = new RegExp(whiteSpace)

// Build file.
var file = [
  '// This module is generated by `script/build-expressions.js`.',
  "'use strict'",
  '',
  'module.exports = {',
  '  ' +
    [
      'affixSymbol: ' + reAffixSymbol,
      'newLine: ' + reNewLine,
      'newLineMulti: ' + reNewLineMulti,
      'terminalMarker: ' + reTerminalMarker,
      'wordSymbolInner: ' + reWordSymbolInner,
      'numerical: ' + reNumerical,
      'digitStart: ' + reDigitStart,
      'lowerInitial: ' + reLowerInitial,
      'surrogates: ' + reSurrogates,
      'punctuation: ' + rePunctuation,
      'word: ' + reWord,
      'whiteSpace: ' + reWhiteSpace
    ].join(',\n  '),
  '}',
  ''
].join('\n')

// Write.
fs.writeFileSync(path.join('lib', 'expressions.js'), file)

function unicode() {
  var args = [].slice.call(arguments)
  args = ['unicode-12.1.0'].concat(args, 'code-points')
  return require(path.join.apply(null, args))
}
